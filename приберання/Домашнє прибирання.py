import os

# --- –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MAIN_FILE = os.path.join(BASE_DIR, "–º—É—Å–æ—Ä–∫–∞.csv")
PREVIEW_FILE = os.path.join(BASE_DIR, "–º—É—Å–æ—Ä–∫–∞_preview.csv")


# --- —É—Ç–∏–ª—ñ—Ç–∏ ---
def to_dec_comma(x: float) -> str:
    """–§–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –∑ –¥–≤–æ–º–∞ –∑–Ω–∞–∫–∞–º–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏, –∫–æ–º–∞ —è–∫ –¥–µ—Å—è—Ç–∫–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫."""
    return f"{float(x):.2f}".replace(".", ",")


def from_dec_comma(s: str) -> float:
    """–ß–∏—Ç–∞—î —á–∏—Å–ª–æ, –ø—Ä–∏–π–º–∞—é—á–∏ —ñ –∫–æ–º—É, —ñ –∫—Ä–∞–ø–∫—É."""
    s = (s or "").strip().replace(" ", "")
    return float(s.replace(",", "."))


def norm_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤."""
    return " ".join((name or "").strip().lower().split())


def price_key(v: float) -> str:
    """–û–∫—Ä—É–≥–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–æ 2 –∑–Ω–∞–∫—ñ–≤ –¥–ª—è –∫–ª—é—á–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∞."""
    return f"{float(v):.2f}"


# --- –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç—É ---
class JunkItem:
    def __init__(self, name: str, quantity: int, value: float):
        safe = (name or "").strip().replace("|", "/").replace(";", "/")
        self.name = safe
        self.quantity = int(quantity)
        self.value = float(value)

    def line(self) -> str:
        """–†—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –∑–∞–¥–∞—á—ñ: –ù–∞–∑–≤–∞|–ö-—Å—Ç—å|–¶—ñ–Ω–∞(–∑ –∫–æ–º–æ—é)"""
        return f"{self.name}|{self.quantity}|{to_dec_comma(self.value)}"

    @staticmethod
    def from_line(line: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä—è–¥–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –∑–∞–¥–∞—á—ñ."""
        parts = [p.strip() for p in line.strip().split("|")]
        if len(parts) != 3:
            return None
        name, q, v = parts
        try:
            q = int(q)
            v = from_dec_comma(v)
            return JunkItem(name, q, v)
        except:
            return None


# --- —Ä–æ–±–æ—Ç–∞ –∑ –¥—É–±–ª—è–º–∏ ---
def item_key(it: JunkItem) -> tuple[str, str]:
    """–ö–ª—é—á –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è ‚Äî (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –Ω–∞–∑–≤–∞, –æ–∫—Ä—É–≥–ª–µ–Ω–∞ —Ü—ñ–Ω–∞)."""
    return (norm_name(it.name), price_key(it.value))


def merge_item(items: list[JunkItem], new_item: JunkItem) -> None:
    """–î–æ–¥–∞—î –∞–±–æ —Å—É–º—É—î, —è–∫—â–æ –¥—É–±–ª—å."""
    k = item_key(new_item)
    for it in items:
        if item_key(it) == k:
            it.quantity += new_item.quantity
            return
    items.append(new_item)


def merge_all(items: list[JunkItem]) -> list[JunkItem]:
    """–û–±'—î–¥–Ω—É—î –≤—Å—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —É —Å–ø–∏—Å–∫—É."""
    acc = []
    for it in items:
        merge_item(acc, it)
    return acc


# --- —Å—Ö–æ–≤–∏—â–µ ---
class JunkStorage:
    @staticmethod
    def serialize(items: list[JunkItem], main_file: str = MAIN_FILE, preview_file: str = PREVIEW_FILE) -> None:
        """–ó–±–µ—Ä—ñ–≥–∞—î –¥–≤–∞ —Ñ–∞–π–ª–∏: –æ—Å–Ω–æ–≤–Ω–∏–π (| —ñ –∫–æ–º–∞) + –ø—Ä–µ–≤ º—é (–∫–æ–º–∏ —ñ –∫—Ä–∞–ø–∫–∏)."""
        items = merge_all(items)

        # 1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª ‚Äî –∑–∞ —É–º–æ–≤–æ—é –∑–∞–¥–∞—á—ñ
        with open(main_file, "w", encoding="utf-8", newline="") as f:
            f.write("–ù–∞–∑–≤–∞|–ö—ñ–ª—å–∫—ñ—Å—Ç—å|–¶—ñ–Ω–∞\n")
            for it in items:
                f.write(it.line() + "\n")

        # 2Ô∏è‚É£ –ü—Ä–µ–≤ º—é ‚Äî –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —É Numbers / Excel / GitHub
        with open(preview_file, "w", encoding="utf-8", newline="") as f:
            f.write("name,quantity,value\n")
            for it in items:
                f.write(f"{it.name},{it.quantity},{it.value:.2f}\n")

        print("‚úÖ –§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:")
        print(f" - –û—Å–Ω–æ–≤–Ω–∏–π: {main_file}  (–ù–∞–∑–≤–∞|–ö—ñ–ª—å–∫—ñ—Å—Ç—å|–¶—ñ–Ω–∞ –∑ –∫–æ–º–æ—é)")
        print(f" - –ü—Ä–µ–≤ º—é:   {preview_file} (3 —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è Numbers/Excel/GitHub)")

    @staticmethod
    def parse(filename: str = MAIN_FILE) -> list[JunkItem]:
        """–ß–∏—Ç–∞—î —è–∫ '–º—É—Å–æ—Ä–∫–∞.csv' (| + –∫–æ–º–∞), —Ç–∞–∫ —ñ '–º—É—Å–æ—Ä–∫–∞_preview.csv' (–∫–æ–º–∏ + –∫—Ä–∞–ø–∫–∞)."""
        items = []
        bad = 0

        def try_take(line: str) -> bool:
            it = JunkItem.from_line(line)
            if it:
                merge_item(items, it)
                return True
            # –º–æ–∂–ª–∏–≤–æ CSV-–≤–∞—Ä—ñ–∞–Ω—Ç (–∫–æ–º–∏ + –∫—Ä–∞–ø–∫–∞)
            if "," in line and line.lower().startswith(("name,", "–Ω–∞–∑–≤–∞,")):
                return True  # —à–∞–ø–∫–∞
            parts = [p.strip() for p in line.strip().split(",")]
            if len(parts) == 3:
                name, q, v = parts
                try:
                    it = JunkItem(name, int(q), float(v))
                    merge_item(items, it)
                    return True
                except:
                    return False
            return False

        try:
            with open(filename, "r", encoding="utf-8") as f:
                for i, line in enumerate(f, 1):
                    if not try_take(line):
                        bad += 1
                        print(f"‚ö†Ô∏è –†—è–¥–æ–∫ {i} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É)")
        except FileNotFoundError:
            print(f"–§–∞–π–ª '{filename}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.")

        if bad:
            print(f"–ü–æ–º–∏–ª–∫–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤: {bad}")
        print(f"üì¶ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: {len(items)}")
        return items


# --- –≤–∏–≤—ñ–¥ —Ç–∞–±–ª–∏—Ü—ñ ---
def show(items: list[JunkItem]) -> None:
    """–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –≤–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å."""
    if not items:
        print("(–ø–æ—Ä–æ–∂–Ω—å–æ)\n")
        return
    print("\n–ù–∞–∑–≤–∞                 | –ö-—Å—Ç—å |  –¶—ñ–Ω–∞  |  –°—É–º–∞ ")
    print("------------------------------------------------")
    total = 0.0
    for it in items:
        s = it.quantity * it.value
        total += s
        print(f"{it.name:<21} | {it.quantity:>5} | {to_dec_comma(it.value):>6} | {to_dec_comma(s):>6}")
    print("------------------------------------------------")
    print(f"–†–∞–∑–æ–º: {to_dec_comma(total)}\n")


# --- –º–µ–Ω—é ---
def menu():
    items = []
    while True:
        print("–ú–µ–Ω—é:")
        print("1. –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç")
        print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏")
        print("3. –ó–±–µ—Ä–µ–≥—Ç–∏ —É —Ñ–∞–π–ª")
        print("4. –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É")
        print("5. –î–µ–º–æ-–Ω–∞–±—ñ—Ä (—Å—É–º–∏ –¥–æ–¥–∞—é—Ç—å—Å—è)")
        print("6. –í–∏–π—Ç–∏")
        ch = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        if ch == "1":
            name = input("–ù–∞–∑–≤–∞: ").strip()
            q = input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å (int): ").strip()
            v = input("–¶—ñ–Ω–∞ (–∫–æ–º–∞ –∞–±–æ –∫—Ä–∞–ø–∫–∞): ").strip()
            try:
                it = JunkItem(name, int(q), from_dec_comma(v))
                merge_item(items, it)
                print("‚úÖ –î–æ–¥–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.\n")
            except:
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É.\n")

        elif ch == "2":
            show(items)

        elif ch == "3":
            JunkStorage.serialize(items)

        elif ch == "4":
            items = JunkStorage.parse(MAIN_FILE)
            show(items)

        elif ch == "5":
            # –¥–µ–º–æ: –¥—É–±–ª—ñ–∫–∞—Ç–∏ –Ω–µ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è, –∞ –¥–æ–¥–∞—é—Ç—å—Å—è
            merge_item(items, JunkItem("–ë–ª—è—à–∞–Ω–∫–∞", 5, 2.50))
            merge_item(items, JunkItem("–°—Ç–∞—Ä–∞ –ø–ª–∞—Ç–∞", 3, 7.80))
            merge_item(items, JunkItem("–ö—É–ø–∫–∞ –¥—Ä–æ—Ç—ñ–≤", 10, 1.20))
            print("üßπ –î–µ–º–æ-–Ω–∞–±—ñ—Ä –¥–æ–¥–∞–Ω–æ (—Å—É–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ).")
            show(items)

        elif ch == "6":
            print("üëã –ì–æ—Ç–æ–≤–æ.")
            break

        else:
            print("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.\n")


# --- –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    menu()