import os

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FILENAME = os.path.join(BASE_DIR, "–º—É—Å–æ—Ä–∫–∞.csv")

# ---------- —É—Ç–∏–ª—ñ—Ç–∏ ----------
def to_dec_comma(x: float) -> str:
    return f"{float(x):.2f}".replace(".", ",")

def from_dec_comma(s: str) -> float:
    s = (s or "").strip().replace(" ", "")
    return float(s.replace(",", "."))

def norm_name(name: str) -> str:
    return " ".join((name or "").strip().lower().split())

def price_key(v: float) -> str:
    return f"{float(v):.2f}"


# ---------- –º–æ–¥–µ–ª—å ----------
class JunkItem:
    def __init__(self, name: str, quantity: int, value: float):
        safe = (name or "").strip().replace("|", "/")
        self.name = safe
        self.quantity = int(quantity)
        self.value = float(value)

    def line(self) -> str:
        return f"{self.name}|{self.quantity}|{to_dec_comma(self.value)}"

    @staticmethod
    def from_line(line: str):
        if "|" not in line:
            return None
        parts = [p.strip() for p in line.strip().split("|")]
        if len(parts) != 3:
            return None
        name, q, v = parts
        try:
            q = int(q)
            v = from_dec_comma(v)
            return JunkItem(name, q, v)
        except:
            return None


# ---------- –æ–±'—î–¥–Ω–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ ----------
def item_key(it: JunkItem) -> tuple[str, str]:
    return (norm_name(it.name), price_key(it.value))

def merge_item(items: list[JunkItem], new_item: JunkItem) -> None:
    k = item_key(new_item)
    for it in items:
        if item_key(it) == k:
            it.quantity += new_item.quantity
            return
    items.append(new_item)

def merge_all(items: list[JunkItem]) -> list[JunkItem]:
    acc = []
    for it in items:
        merge_item(acc, it)
    return acc


# ---------- —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ----------
class JunkStorage:
    @staticmethod
    def serialize(items: list[JunkItem], filename: str = FILENAME) -> None:
        """–ó–±–µ—Ä—ñ–≥–∞—î —É —Ñ–æ—Ä–º–∞—Ç—ñ –∑ | —ñ –∫–æ–º–∞–º–∏, –∞–ª–µ –∑ —à–∞–ø–∫–æ—é –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ."""
        items = merge_all(items)
        with open(filename, "w", encoding="utf-8", newline="") as f:
            f.write("–ù–∞–∑–≤–∞|–ö—ñ–ª—å–∫—ñ—Å—Ç—å|–¶—ñ–Ω–∞\n")  # —à–∞–ø–∫–∞
            for it in items:
                f.write(it.line() + "\n")
        print(f" –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")

    @staticmethod
    def parse(filename: str = FILENAME) -> list[JunkItem]:
        """–ß–∏—Ç–∞—î –∑ —Ñ–∞–π–ª—É, —ñ–≥–Ω–æ—Ä—É—é—á–∏ —à–∞–ø–∫—É."""
        items = []
        bad = 0
        try:
            with open(filename, "r", encoding="utf-8") as f:
                first = True
                for i, line in enumerate(f, 1):
                    if first and "–ù–∞–∑–≤–∞" in line and "|" in line:
                        first = False
                        continue
                    first = False
                    it = JunkItem.from_line(line)
                    if it:
                        merge_item(items, it)
                    else:
                        bad += 1
                        print(f"‚ö†Ô∏è –†—è–¥–æ–∫ {i} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∑—ñ–ø—Å–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ)")
            if bad:
                print(f"–ü–æ–º–∏–ª–∫–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤: {bad}")
            print(f"üì¶ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: {len(items)}")
        except FileNotFoundError:
            print(f"–§–∞–π–ª '{filename}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.")
        return items


# ---------- –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ----------
def show(items: list[JunkItem]) -> None:
    if not items:
        print("(–ø–æ—Ä–æ–∂–Ω—å–æ)\n")
        return
    print("\n–ù–∞–∑–≤–∞                 | –ö-—Å—Ç—å |  –¶—ñ–Ω–∞  |  –°—É–º–∞ ")
    print("------------------------------------------------")
    total = 0.0
    for it in items:
        s = it.quantity * it.value
        total += s
        print(f"{it.name:<21} | {it.quantity:>5} | {to_dec_comma(it.value):>6} | {to_dec_comma(s):>6}")
    print("------------------------------------------------")
    print(f"–†–∞–∑–æ–º: {to_dec_comma(total)}\n")


# ---------- –º–µ–Ω—é ----------
def menu():
    items: list[JunkItem] = []
    while True:
        print("–ú–µ–Ω—é:")
        print("1. –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç")
        print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏")
        print("3. –ó–±–µ—Ä–µ–≥—Ç–∏ —É —Ñ–∞–π–ª")
        print("4. –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É")
        print("5. –î–µ–º–æ (3 –ø—Ä–µ–¥–º–µ—Ç–∏; –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Å—É–º—É—é—Ç—å—Å—è)")
        print("6. –í–∏–π—Ç–∏")
        ch = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        if ch == "1":
            name = input("–ù–∞–∑–≤–∞: ").strip()
            q = input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å (int): ").strip()
            v = input("–¶—ñ–Ω–∞ (–∫—Ä–∞–ø–∫–∞ –∞–±–æ –∫–æ–º–∞): ").strip()
            try:
                it = JunkItem(name, int(q), from_dec_comma(v))
                merge_item(items, it)
                print("‚úÖ –î–æ–¥–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.\n")
            except:
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É.\n")

        elif ch == "2":
            show(items)

        elif ch == "3":
            JunkStorage.serialize(items, FILENAME)

        elif ch == "4":
            items = JunkStorage.parse(FILENAME)
            show(items)

        elif ch == "5":
            # –¥–µ–º–æ –∑ —Ñ—ñ–∫—Å–æ–º ‚Äî —Å—É–º–∏ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
            merge_item(items, JunkItem("–ë–ª—è—à–∞–Ω–∫–∞", 5, 2.50))
            merge_item(items, JunkItem("–°—Ç–∞—Ä–∞ –ø–ª–∞—Ç–∞", 3, 7.80))
            merge_item(items, JunkItem("–ö—É–ø–∫–∞ –¥—Ä–æ—Ç—ñ–≤", 10, 1.20))
            print("üßπ –î–µ–º–æ-–Ω–∞–±—ñ—Ä –¥–æ–¥–∞–Ω–æ (—Å—É–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ).")
            show(items)

        elif ch == "6":
            print(" –ì–æ—Ç–æ–≤–æ.")
            break
        else:
            print("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.\n")


if __name__ == "__main__":
    menu()